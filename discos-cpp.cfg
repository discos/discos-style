#
# K&R (sort-of)
#

indent_with_tabs		= 0		# 1=indent to level only, 2=indent with tabs
input_tab_size			= 8		# original tab size
output_tab_size			= 4		# new tab size
indent_columns			= output_tab_size
indent_align_string		= True		# align broken strings
indent_constr_colon		= true
indent_namespace 		= true
indent_class			= true
indent_class_colon		= true


nl_enum_brace			= remove	# "enum {" vs "enum \n {"
nl_union_brace			= remove	# "union {" vs "union \n {"
nl_struct_brace			= remove	# "struct {" vs "struct \n {"
nl_do_brace			    = remove	# "do {" vs "do \n {"
nl_if_brace			    = add	# "if () {" vs "if () \n {"
nl_for_brace			= remove	# "for () {" vs "for () \n {"
nl_else_brace			= remove	# "else {" vs "else \n {"
nl_while_brace			= remove	# "while () {" vs "while () \n {"
nl_switch_brace			= add	# "switch () {" vs "switch () \n {"
nl_func_type_name		= add
nl_func_scope_name 		= remove
nl_func_proto_type_name	= remove
nl_func_paren			= remove
nl_func_def_paren		= remove
nl_func_leave_one_liners	= true
nl_class_brace 			= add
nl_template_class		= add
nl_namespace_brace		= add
nl_fcall_brace			= add		# "foo() {" vs "foo()\n{"
nl_fdef_brace			= add		# "int foo() {" vs "int foo()\n{"
nl_after_return			= false
nl_after_func_proto		= 2
nl_after_func_body		= 2
nl_after_func_body_class	= 2
nl_after_struct			= 2
nl_after_class			= 2
nl_after_access_spec	= 2
nl_brace_while			= remove
nl_brace_else			= remove
nl_squeeze_ifdef		= TRUE
nl_constr_colon			= add
nl_constr_init_args		= add

# mod_paren_on_return		= add		# "return 1;" vs "return (1);"
# mod_full_brace_if		= add		# "if (a) a--;" vs "if (a) { a--; }"
# mod_full_brace_for		= add		# "for () a--;" vs "for () { a--; }"
# mod_full_brace_do		= add		# "do a--; while ();" vs "do { a--; } while ();"
# mod_full_brace_while		= add		# "while (a) a--;" vs "while (a) { a--; }"

sp_before_semi			= remove
sp_paren_paren			= remove	# space between (( and ))
sp_return_paren			= remove	# "return (1);" vs "return(1);"
sp_sizeof_paren			= remove	# "sizeof (int)" vs "sizeof(int)"
sp_before_sparen		= remove		# "if (" vs "if("
sp_after_sparen			= remove		# "if () {" vs "if (){"
sp_after_cast			= remove	# "(int) a" vs "(int)a"
sp_after_semi           = ignore
sp_after_comma          = add
sp_after_assign         = add
sp_inside_braces		= remove		# "{ 1 }" vs "{1}"
sp_inside_braces_struct	= remove		# "{ 1 }" vs "{1}"
sp_inside_braces_enum	= remove		# "{ 1 }" vs "{1}"
sp_inside_paren			= remove	# "( 1 )" vs "(1)"
sp_inside_fparen		= remove        # "( 1 )" vs "(1)" - functions
sp_inside_sparen		= remove        # "( 1 )" vs "(1)" - if/for/etc
# sp_type_func			= ignore
sp_assign			    = force
sp_arith			    = force
sp_bool				    = force
sp_compare			    = force
sp_after_comma			= force
sp_func_def_paren		= remove	# "int foo (){" vs "int foo(){"
sp_func_call_paren		= remove	# "foo (" vs "foo("
sp_func_proto_paren		= remove	# "int foo ();" vs "int foo();"
sp_catch_paren			= remove
sp_before_constr_colon	= add

align_with_tabs			= FALSE		# use tabs to align
align_left_shift 		= TRUE
# align_on_tabstop		= FALSE		# align on tabstops
# align_enum_equ_span		= 4
# align_nl_cont			= TRUE
# align_var_def_span		= 2
# align_var_def_inline		= TRUE
# align_var_def_star		= TRUE
# align_var_def_colon		= TRUE
# align_assign_span		= 1
# align_struct_init_span		= 3
# align_var_struct_span		= 3
# align_right_cmt_span		= 3
# align_pp_define_span		= 3
# align_pp_define_gap		= 4
# align_number_left		= TRUE
# align_typedef_span		= 5
# align_typedef_gap		= 3

code_width 			    = 80
ls_for_split_full 		= TRUE
ls_func_split_full 		= TRUE
ls_code_width			= false

# cmt_star_cont			= TRUE

eat_blanks_before_close_brace	= TRUE
eat_blanks_after_open_brace	= TRUE

